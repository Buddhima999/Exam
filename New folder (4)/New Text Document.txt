import javax.swing.*;
import java.awt.*;
public class BresenhamAllSlopes extends JPanel {

public void paint(Graphics g) {
 drawBresenhamLine(g, 50, 50, 200, 100);
 drawBresenhamLine(g, 50, 50, 100, 200);
 drawBresenhamLine(g, 200, 200, 50, 150);
 drawBresenhamLine(g, 200, 200, 150, 50);
 }
 public void drawBresenhamLine(Graphics g, int x1, int y1, int x2, int y2) {
 int dx = Math.abs(x2 - x1);
 int dy = Math.abs(y2 - y1);
 int sx = (x2 > x1) ? 1 : -1;
 int sy = (y2 > y1) ? 1 : -1;
 if (dx >= dy) {
 int d = 2 * dy - dx;
 int y = y1;
 for (int x = x1; x != x2; x += sx) {
 g.fillRect(x, y, 2, 2);
 if (d > 0) {
 y += sy;
 d -= 2 * dx;
 }
 d += 2 * dy;
 }
 } else {
 int d = 2 * dx - dy;
 int x = x1;
 for (int y = y1; y != y2; y += sy) {
 g.fillRect(x, y, 2, 2);
 if (d > 0) {
 x += sx;
 d -= 2 * dy;
 }
 d += 2 * dx;
 }
 }
 }
 public static void main(String[] args) {
 JFrame frame = new JFrame("Bresenham Line Drawing for All Slopes");
 BresenhamAllSlopes panel = new BresenhamAllSlopes();
 frame.add(panel);
 frame.setSize(400, 4


 //Mid point
 private void drawCircle(Graphics g, int xc, int yc, int r) {
 int x = 0, y = r;
 int p = 1 - r; // Initial decision parameter
 plotPoints(g, xc, yc, x, y);
 while (x < y) {
 x++;
 if (p < 0) {
 p += 2 * x + 1;
 } else {
 y--;
 p += 2 * (x - y) + 1;
 }
 plotPoints(g, xc, yc, x, y);
 }
 }
 private void plotPoints(Graphics g, int xc, int yc, int x, int y) {
 g.fillRect(xc + x, yc + y, 2, 2);
 g.fillRect(xc - x, yc + y, 2, 2);
 g.fillRect(xc + x, yc - y, 2, 2);
 g.fillRect(xc - x, yc - y, 2, 2);
 g.fillRect(xc + y, yc + x, 2, 2);
 g.fillRect(xc - y, yc + x, 2, 2);
 g.fillRect(xc + y, yc - x, 2, 2);
 g.fillRect(xc - y, yc - x,2,2);

 //Bresenham circle___________
 import javax.swing.*;
import java.awt.*;
public class BresenhamCircle extends JPanel {

public void paint(Graphics g) {

 drawBresenhamCircle(g, 200, 200, 100);


 }
 private void drawBresenhamCircle(Graphics g, int xc, int yc, int r)
{
 int x = 0, y = r;
 int d = 3 - 2 * r; // Initial decision parameter
 plotPoints(g, xc, yc, x, y);
 while (y >= x) {
 x++;
 if (d > 0) {
 y--;
 d = d + 4 * (x - y) + 10;
 } else {
 d = d + 4 * x + 6;
 }
 plotPoints(g, xc, yc, x, y);
 }
 }
 private void plotPoints(Graphics g, int xc, int yc, int x, int y) {
 g.fillRect(xc + x, yc + y, 2, 2);
 g.fillRect(xc - x, yc + y, 2, 2);
 g.fillRect(xc + x, yc - y, 2, 2);
 g.fillRect(xc - x, yc - y, 2, 2);
 g.fillRect(xc + y, yc + x, 2, 2);
 g.fillRect(xc - y, yc + x, 2, 2);
 g.fillRect(xc + y, yc - x, 2, 2);
 g.fillRect(xc - y, yc - x, 2, 2);
 }
 public static void main(String[] args) {

 JFrame frame = new JFrame("Bresenham Circle Algorithm");
 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 frame.setSize(500, 500);
 BresenhamCircle panel = new BresenhamCircle();
 frame.add(panel);
 frame.setVisible(true);
 }
 }
//Translation
package chanux;
import java.awt.*;
import javax.swing.*;

public class Translate extends JPanel {
	public void paint(Graphics g) {
		super.paintComponent(g);
		
		//ddaLine(g,100,100,250,200);
		int[] x = {20,200,200,20};
		int[] y = {200,200,50,50};
		
		g.setColor(Color.yellow);
		ddaLine(g,x[0],y[0],x[1],y[1]);
		ddaLine(g,x[1],y[1],x[2],y[2]);
		ddaLine(g,x[2],y[2],x[3],y[3]);
		ddaLine(g,x[3],y[3],x[0],y[0]);
		
		
		
		translate(x,y,250,250);
		
		g.setColor(Color.red);
		ddaLine(g,x[0],y[0],x[1],y[1]);
		ddaLine(g,x[1],y[1],x[2],y[2]);
		ddaLine(g,x[2],y[2],x[3],y[3]);
		ddaLine(g,x[3],y[3],x[0],y[0]);
	}
	
	public void ddaLine(Graphics g,int x1,int y1,int x2,int y2) {
		int dx = x2 -x1;
		int dy = y2 -y1;
		
		int steps = Math.max(Math.abs(dx), Math.abs(dy));
		
		float x_inc = (float) dx /steps;
		float y_inc = (float) dy/steps;
		
		float x = x1;
		float y = y1;
		
		for(int i=0;i<=steps;i++) {
			g.fillRect(Math.round(x), Math.round(y), 2, 2);
			x += x_inc;
			y +=y_inc;
		}
	}
	public void translate(int x[],int y[], int tx,int ty ) {
		for(int i=0;i<x.length;i++) {
			 x[i] += tx;
			 y[i] +=ty;
		}
	}
  public static void main(String[] args) {
	  JFrame frame = new JFrame("Translate");
	  Translate panel = new Translate();
	  frame.add(panel);
	  frame.setSize(600,600);
	  frame.setVisible(true);
	  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
}

//Scale
package chanux;
import java.awt.*;
import javax.swing.*;

public class Scaling1 extends JPanel {
	public void paint(Graphics g) {
		super.paintComponent(g);
		
		int[] x = {20,240,240,20};
		int[] y = {250,250,100,100};
		
		g.setColor(Color.BLUE);
		rectangle(g,x,y);
		
		float sx =1.5f;
		float sy= 0.5f;
		
		scale(x,y,sx,sy);
		g.setColor(Color.RED);
		rectangle(g,x,y);

	}
	
	public void rectangle(Graphics g,int[]x,int[]y) {
		drawLine(g,x[0],y[0],x[1],y[1]);
		drawLine(g,x[1],y[1],x[2],y[2]);
		drawLine(g,x[2],y[2],x[3],y[3]);
		drawLine(g,x[3],y[3],x[0],y[0]);
	}
	
	public void drawLine(Graphics g,int x1,int y1,int x2,int y2) {
		int dx = x2 -x1;
		int dy = y2 -y1;
		
		int steps = Math.max(Math.abs(dx), Math.abs(dy));
		
		float x_inc = (float) dx/steps;
		float y_inc = (float) dy/steps;
		
		float x =x1;
		float y = y1;
		
		for(int i=0;i<steps;i++) {
			g.fillRect(Math.round(x), Math.round(y), 2, 2);
			x +=x_inc;
			y +=y_inc;
		}
		
	}
	
	public void scale(int[] x,int[] y,float sx,float sy) {
		for(int i=0;i<x.length;i++) {
			x[i] += Math.round(x[i]*sx);
			y[i] += Math.round(y[i]*sy);
		}
	}
  public static void main(String[] args) {
	  JFrame frame = new JFrame("Scale");
	  Scaling1 panel = new Scaling1();
	  
	  frame.add(panel);
	  frame.setSize(600,600);
	  frame.setVisible(true);
	  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
}
//RoTate
package chanux;
import java.awt.*;
import javax.swing.*;

public class Rotate extends JPanel {
	public void paint(Graphics g) {
		super.paintComponent(g);
		
		int[] x = {200,500,500,200};
		int[] y = {200,200,100,100};
		g.setColor(Color.GREEN);
		rectangle(g,x,y);
		
		double angle = Math.toRadians(60);
		rotate(x,y,angle);
		g.setColor(Color.RED);
		rectangle(g,x,y);
		
	}
	
	public void rectangle(Graphics g,int[] x,int[] y) {
		drawLine(g,x[0],y[0],x[1],y[1]);
		drawLine(g,x[1],y[1],x[2],y[2]);
		drawLine(g,x[2],y[2],x[3],y[3]);
		drawLine(g,x[3],y[3],x[0],y[0]);
		
	}
	
	public void drawLine(Graphics g,int x1,int y1,int x2,int y2) {
		int dx = x2 -x1;
		int dy = y2 - y1;
		
		int steps = Math.max(Math.abs(dx), Math.abs(dy));
		
		float x_inc = (float) dx/steps;
		float y_inc = (float) dy/steps;
		
		float x =x1;
		float y =y1;
		
		for(int i=0;i<=steps;i++) {
			g.fillRect(Math.round(x), Math.round(y), 2, 2);
			x +=x_inc;
			y +=y_inc;
		}
	}
	public void rotate(int[] x,int[] y,double angle) {
		for(int i=0;i<x.length;i++) {
			int oldX = x[i];
			int oldY = y[i];
			
			x[i] = Math.round((float)(oldX * Math.cos(angle) - oldY* Math.sin(angle)));
			y[i] = Math.round((float)(oldX * Math.sin(angle) + oldY * Math.cos(angle)));
		}
	}
  public static void main(String[] args) {
	  JFrame frame = new JFrame("Rotate");
	  Rotate panel = new Rotate();
	  frame.add(panel);
	  frame.setSize(600,600);
	  frame.setVisible(true);
	  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
}
